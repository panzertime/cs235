//
//  avlTree.h
//  project 6
//
//  Created by Arthur Hatfield on 23/03-2014.
//  Copyright (c) 2014 Arthur Hatfield. All rights reserved.
//

#ifndef __project_6__avlTree__
#define __project_6__avlTree__

#include <iostream>
#include "LinkedList.h"

using namespace std;

template <typename obj>

class avlTree {
public:
    


    avlTree<obj>(){
        size = 0;
        root = NULL;
    }
    
    virtual ~avlTree(){
        clear();
    }
    
    class node {
    public:
        obj item;
        node* left;
        node* right;
        int height;

	node(obj i){
		left = NULL;
		right = NULL;
		item = i;
		height = 1;
	}

        virtual ~node(){
        	left = NULL;
        	right = NULL;
        }

    };
    
    
    node* root;
    int size;
    
    void clear(){ 	// redo
        if(size != 0){

        }
    }

	//following code is responsible for figuring out which
	//levels to print
    void level(LinkedList<node*> & current, int & no, ofstream & to){
    	LinkedList<node*> plus;
    	int k = current.size;
    	for(int i = 0; i < k; i++){
    		node* at = current.get(i);
    		if(at->right != NULL){
    			plus.append(at->right);
    		}
    		if(at->left != NULL){
    			plus.append(at->left);
    		}
    	}
    	if (plus.size != 0){
    		print(plus,no,to);
    		no++;
    		level(plus,no,to);
    	}
    	else {
    		return;
    	}
    }
    
    void print(LinkedList<node*> & lev, int & no, ofstream & to){
    	int k = lev.size;
    	for(int i = 0 ; i < k; i++){
        	if (i % 8 == 0){
        		to << endl << "level " << no << ": ";
        	}
        	node* at = lev.get((k-i)-1);
        	to << at->item << "(" << at->height << ") ";
    	}
    }

    void print(ofstream & to){// redo
    	if(size != 0){
    		LinkedList<node*> zero;
    		zero.insert(0,root);
    		int depth = 0;
    		print(zero,depth,to);
    		depth++;
    		level(zero,depth,to);
    		to << endl;
    	}
    	if(size == 0){
    		to << endl;
    	}
    }


    void fixHeight(node* where){
	if (where -> left == NULL && where -> right == NULL){
    		where -> height = 1;
    	}
    	else if (where -> left != NULL && where -> right == NULL){
    		where -> height = where -> left -> height +1;
    	}
    	else if (where -> left == NULL && where -> right != NULL){
    		where -> height = where -> right -> height +1;
    	}
    	else if ((where -> left) -> height > (where -> right) -> height){
    		where -> height = (where -> left) -> height + 1;
    	}
    	else {
    		where -> height = (where -> right) -> height + 1;
    	}
    }


/**
    int fixHeight(node* & lroot){
	    if(lroot->left == NULL && lroot->right == NULL){
		    lroot->height = 1;
		    return 1;
	    }
	    else if (heightAt(lroot->left) > heightAt(lroot->right)){
		    lroot->height = fixHeight(lroot->left) + 1;
    
    		}
	}
**/

    void add(const obj& item) {
    	if (root == NULL){
    		root = new node(item);
		size++;
	}
	else {add(item, root);}
    }
	
    bool add(const obj & item, node* & lroot) {
	if (item == lroot -> item){
		return false;
		//this is not happening duh
		//no balancing necessary, returns false
	}
	else if (item < lroot->item){
		//add on left side
		// if returns true, check and balance
		if(lroot->left == NULL){
			lroot->left = new node(item);
			size++;
			//height adjust ?  gotta figure that out
			return true;
			//in theory should only return true here
		}
		else if(add(item, lroot -> left)){
			//balancer
			//we'll be dealing here with immediate parents
		//	balance(lroot);
			return false;
		}
	}
	else if (item > lroot->item){
		//add on right side
		// if returns true, check and balance
		if(lroot->right == NULL){
			lroot->right = new node(item);
			size++;
			// height adjust again...
			return true;
		}
		else if(add(item, lroot -> right)){
			//balancer
			//dealing with les renps
		//	balance(lroot);
			return false;
		}
	}
    return false; //unreachable code, screw g++
    }












    void remove(const obj& item){
    	if(size != 0){
    		if(find(item)){
    			if(item == root->item){
    				node* temp = excise(root);
    				root = temp;
    				fixHeight(root);
    			}
    			else{
        			remove(item, root);
    			}
    		}
    	}
    }

    
    void remove(const obj& item, node* & where) {
    	node* l = where -> left;
    	node* r = where -> right;
    	if(l != NULL && item < where -> item){
    		if(item == l -> item){
    			where->left = excise(l);
    			fixHeight(l);
    			chkBal(root);
    		}
    		else{
    			remove(item,l);
    		}
    	}
    	if(item > where -> item && r != NULL){
    		if(item == r -> item){
    			where->right = excise(r);
    			fixHeight(r);
    			chkBal(root);
    		}
    		else{
    			remove(item,r);
    		}
    	}
    }

    node* excise(node* & where){		//erases given node, returns reconnection point
 /**   	if(heightAt(where) == 1){    //by this means you can pretend you know the parent
    		delete where;
    		size--;//TEST CODE REMOVE LATER:
		cout << "size: " << size;

    		return NULL;
    	}
    	if(where->left != NULL && where->right == NULL){
    		node* temp = where->left;
    		delete where;
    		size--;//TEST CODE REMOVE LATER:
		cout << "size: " << size;

    		return temp;
    	}
    	if(where->right != NULL && where->left == NULL){
    		node* temp = where->right;
    		delete where;
    		size--;//TEST CODE REMOVE LATER:
		cout << "size: " << size;

    		return temp;
    	}
    	if(where->left != NULL && where->right != NULL){
    		node* bottom = min(where);
    		node* newlast = minp(where);
    		newlast->left = NULL;
    		bottom->right = where->right;
    		bottom->left = where->left;
    		delete where;
    		size--;//TEST CODE REMOVE LATER:
		cout << "size: " << size;

    		return bottom;
    	} **/
    	return NULL;
    }

   
    bool find(const obj& item){
    	if(size!=0){
    		return find(item,root);
    	}
    	return false;
    }

    bool find(const obj& item, node* where) {
    	if(item == where->item){
    		return true;
    	}
    	if(item > where -> item && where -> right != NULL){
    		return find(item, where->right);
    	}
    	if(item < where -> item && where -> left != NULL){
    		return find(item, where->left);
    	}
    	return false;
    }

    void chkBal(node* & where){
    	if(heightAt(where->left)-heightAt(where->right) > 1){
    		bRight(where);
    	}
    	else if (heightAt(where->right)-heightAt(where->left) > 1){
    		bLeft(where);
    	}
    }

    void bRight(node* & where){
    	if(heightAt(where->left->right) > heightAt(where->left->left)){
    		rotLeft(where->left);
    	}
    	rotRight(where);
    }

    void bLeft(node* & where){
    	if(heightAt(where->right->left) > heightAt(where->right->right)){
    		rotRight(where->right);
    	}
    	rotLeft(where);
    }
    
    void rotRight(node* & where){
    	node* temp = where->left;
    	where->left = temp->right;
    	temp->right = where;
    	where = temp;
    	fixHeight(where);
    	fixHeight(temp);
    }

    void rotLeft(node* & where){
    	node* temp = where->right;
    	where->right = temp->left;
    	temp->left = where;
    	where = temp;
    	fixHeight(where);
    	fixHeight(temp);
    }

    int heightAt(node* & where){
    	if(where == NULL){
    		return 0;
    	}
    	else{
    		return where->height;
    	}
    }


};






#endif /* defined(__project_6__avlTree__) */
