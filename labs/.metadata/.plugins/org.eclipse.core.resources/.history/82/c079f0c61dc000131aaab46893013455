//
//  LinkedList.h
//  project 5
//
//  Created by Arthur Hatfield on 23/03-2014.
//  Copyright (c) 2014 Arthur Hatfield. All rights reserved.
//

#ifndef __project_5__LinkedList__
#define __project_5__LinkedList__

#include <iostream>

using namespace std;

template <typename obj>

class avlTree {
public:
    
    avlTree<obj>(){
        size = 0;

        root = NULL;
    }
    
    virtual ~avlTree(){
        clear();
    }
    
    class node {
    public:
        obj item;
        node* left;
        node* right;
        int height;

    };
    
    
    node* root;
    int size;
    
    void clear(){ 	// redo
        if(size != 0){

        }
    }
    
    void print(ofstream & to){		// redo
    	if(size != 0){


    	}
    }
    
    void add(const obj& item) {
    	if (size == 0){
    		node* first = new node*;
    		root = first;
    		first -> item = item;
    		first -> left = NULL;
    		first -> right = NULL;
    		first -> height = 1;
    	}
    	else {
    		add(item, root);
    	}

    	size++
    }

    node* add(const obj& item, node* where) {
    	if (item < where -> item){

    	}
    	if (item > where -> item){

    	}
    	if (item == where -> item){

    	}

    }


    
    obj remove(const obj& item) {
    	obj ex;

        if (size !=0){

        }
        
        size--;
        return ex;
        
    }
    
    string find(const obj& item) {

    	// recurse - attempt to follow short path
    	// if found, return true
    	// if not found, return false

        
    }

    
    //	unlikely that this will be necessary
//    node* get(int index){
//
//    	if (index == 0){
//    		return head;
//    	}
//
//    	if (index == size - 1){
//    		return tail;
//    	}
//
//    	if (index < size / 2){
//            node *temp = head;
//            int i = 0;
//            while (i < index){
//            	i++;
//            	temp = temp->next;
//            }
//            return temp;
//    	}
//    	else {
//            node *temp = tail;
//            int i = size - 1;
//            while (i > index){
//            	i--;
//            	temp = temp->prev;
//            }
//            return temp;
//    	}
//    }
//

};






#endif /* defined(__project_5__LinkedList__) */
