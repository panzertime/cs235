//
//  main.cpp
//  lab 3
//
//  Created by Arthur Hatfield on 31/01-2014.
//  Copyright (c) 2014 Arthur Hatfield. All rights reserved.
//

#include <iostream>
#include <set>
#include <string>
#include <fstream>
#include <vector>
#include <sstream>
#include <cmath>

using namespace std;

string pretty(string& in){
    for (auto p : in){
        p = tolower(p);
    }
    return in;
}


set<string> makeDict(const char* fname){
    set<string> dest;
    ifstream from;
    from.open(fname);
    string c;
    while (getline(from, c)) {
    	c = pretty(c);
        dest.insert(c);
    }
    from.close();
    return dest;
}

vector<vector<char>> makeBoard(const char* fname){
    vector<vector<char>> dest;
    vector<char> lines;
    ifstream from;
    from.open(fname);
    vector<char> stor;
    stringstream ss;
    ss << &from;
    char c;
    while (ss.get(c)){
        if (isalpha(c)) {
        	tolower(c);
            stor.push_back(c);
        }
    }
    int n = stor.size();
    n = sqrt(n);
    for(int i = 0; i < n; i++){
        vector<char> row;
        for (int j = 0; j < n; j++) {
            row.push_back(stor.front());
            stor.pop_back();
        }
        dest.push_back(row);
    }
    from.close();
    return dest;
}

bool dictPredict(set<string>& in, string& prefix){
    string match;
    match = *in.lower_bound(prefix);        //  remember that this is actually dereffing an iterator
    match = match.substr(prefix.size());    //  and check the substring
    if (match == prefix){
        return 1;							//	true if possible match
    }
    return 0;								//	false if no-go
}


bool dictCheck(set<string>& in, string& word){
    if(in.count(word)){
        return 1;
    }
    return 0;
}

bool onBoard(int x, int y, int bound){
	if (x < 0 || y < 0){
		return 0;					// false if above or to the left
	}
	if (x > bound || y > bound){
		return 0;					// false if to the right or below
	}
	return 1;						// otherwise, OK
}




int main(int argc, const char * argv[]){
    
    set<string> dictionary = makeDict(argv[1]);
    
    vector<vector<char>> board = makeBoard(argv[2]);
    
    int dim;						// global variable of board size
    dim = board.size-1();





    
    return 0;
}


