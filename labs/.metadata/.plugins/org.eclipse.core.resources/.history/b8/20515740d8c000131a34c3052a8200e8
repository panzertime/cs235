//
//  avlTree.h
//  project 6
//
//  Created by Arthur Hatfield on 23/03-2014.
//  Copyright (c) 2014 Arthur Hatfield. All rights reserved.
//

#ifndef __project_5__LinkedList__
#define __project_5__LinkedList__

#include <iostream>
#include "../LinkedList.h"

using namespace std;

template <typename obj>

class avlTree {
public:
    
    avlTree<obj>(){
        size = 0;

        root = NULL;
    }
    
    virtual ~avlTree(){
        clear();
    }
    
    class node {
    public:
        obj item;
        node* left;
        node* right;
        int height;

    };
    
    
    node* root;
    int size;
    
    void clear(){ 	// redo
        if(size != 0){

        }
    }
    
    void print(ofstream & to){		// redo
    	if(size != 0){
    		//print(root);


    	}
    }
    
    void print(LinkedList<node*> & level, int no){

    }

    void levelp(LinkedList<node*> & current){
    	LinkedList<node*> next;
    	for(int i = 1; i < current.size(); i++){
    		node* at = current.get(i);
    		if(at->left != NULL)
    			next.insert(next.size(),at->left);
    		if(at->right != NULL)
    			next.insert(next.size(),at->right);
    	}

    	if(next.size()!=0){


    	}
    }

    void add(const obj& item) {
    	if (size == 0){
    		node* first = new node;
    		root = first;
    		first -> item = item;
    		first -> left = NULL;
    		first -> right = NULL;
    		first -> height = 1;
    	}
    	else {
    		add(item, root);
    	}
    }

    void add(const obj& item, node* where) {
    	if (item < where -> item){
    		if (where -> left == NULL){
    			node* temp = new node;
    			temp -> item = item;
    			temp -> height = 1;	// is always added as leaf, h = 1
    			where -> left = temp;
    			size++;
    		}
    		else {
    			add(item, where->left);
    		}
    	}
    	if (item > where -> item){
    		if (where -> right == NULL){
    			node* temp = new node;
    			temp -> item = item;
    			temp -> height = 1;	//	is always added as leaf, h = 1
    			size++;
    			where -> right = temp;
    		}
    		else {
    			add(item, where->right);
    		}
    	}
    	if (item == where -> item){
    		return;
    	}
    	if (where -> left -> height > where -> right -> height){
    		where -> height = where -> left -> height + 1;
    	}
    	else {
    		where -> height = where -> right -> height + 1;
    	}
    }


    void remove(const obj& item){
    	if(size != 0){
    		remove(item, root);
    	}
    }

    
    void remove(const obj& item, node* where) {


        
    }
    
    string find(const obj& item) {

    	// recurse - attempt to follow short path
    	// if found, return true
    	// if not found, return false

        return "";
    }

    
    //	unlikely that this will be necessary
//    node* get(int index){
//
//    	if (index == 0){
//    		return head;
//    	}
//
//    	if (index == size - 1){
//    		return tail;
//    	}
//
//    	if (index < size / 2){
//            node *temp = head;
//            int i = 0;
//            while (i < index){
//            	i++;
//            	temp = temp->next;
//            }
//            return temp;
//    	}
//    	else {
//            node *temp = tail;
//            int i = size - 1;
//            while (i > index){
//            	i--;
//            	temp = temp->prev;
//            }
//            return temp;
//    	}
//    }
//

};






#endif /* defined(__project_5__LinkedList__) */
