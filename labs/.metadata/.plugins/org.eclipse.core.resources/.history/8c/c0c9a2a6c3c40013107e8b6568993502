//
//  avlTree.h
//  project 6
//
//  Created by Arthur Hatfield on 23/03-2014.
//  Copyright (c) 2014 Arthur Hatfield. All rights reserved.
//

#ifndef __project_6__avlTree__
#define __project_6__avlTree__

#include <iostream>
#include "LinkedList.h"

using namespace std;

template <typename obj>

class avlTree {
public:
    
    avlTree<obj>(){
        size = 0;
        root = NULL;
    }
    
    virtual ~avlTree(){
        clear();
    }
    
    class node {
    public:
        obj item;
        node* left;
        node* right;
        int height;

    };
    
    
    node* root;
    int size;
    
    void clear(){ 	// redo
        if(size != 0){

        }
    }
    
    void level(LinkedList<node*> & current, int & no, ofstream & to){
    	LinkedList<node*> plus;
    	int k = current.size;
    	for(int i = 0; i < k; i++){
    		node* at = current.get(i);
    		if(at->right != NULL){
    			plus.append(at->right);
    		}
    		if(at->left != NULL){
    			plus.append(at->left);
    		}
    	}
    	if (plus.size != 0){
    		print(plus,no,to);
    		no++;
    		level(plus,no,to);
    	}
    	else {
    		return;
    	}
    }
    
    void print(LinkedList<node*> & lev, int & no, ofstream & to){
    	int k = lev.size;
    	for(int i = 0 ; i < k; i++){
        	if (i % 8 == 0){
        		to << endl << "level " << no << ": ";
        	}
        	node* at = lev.get((k-i)-1);
        	to << at->item << "(" << at->height << ") ";
    	}
    }

    void print(ofstream & to){// redo
    	if(size != 0){
    		LinkedList<node*> zero;
    		zero.insert(0,root);
    		int depth = 0;
    		print(zero,depth,to);
    		depth++;
    		level(zero,depth,to);
    	}
    }

    void add(const obj& item) {
    	if (size == 0){
    		node* first = new node;
    		first -> item = item;
    		first -> left = NULL;
    		first -> right = NULL;
    		first -> height = 1;
    		root = first;
    		size++;
    	}
    	else {
    		add(item, root);
    	}
    }

    void fixHeight(node* where){
    	if (where -> left == NULL && where -> right == NULL){
    		where -> height = 1;
    	}
    	else if (where -> left != NULL && where -> right == NULL){
    		where -> height = where -> left -> height +1;
    	}
    	else if (where -> left == NULL && where -> right != NULL){
    		where -> height = where -> right -> height +1;
    	}
    	else if ((where -> left) -> height > (where -> right) -> height){
    		where -> height = (where -> left) -> height + 1;
    	}
    	else {
    		where -> height = (where -> right) -> height + 1;
    	}
    }

    void add(const obj& nitem, node* where) {
    	if (nitem < where -> item){
    		if (where -> left == NULL){
    			node* temp = new node;
    			temp -> item = nitem;
    			temp -> left = NULL;
    			temp -> right = NULL;
    			temp -> height = 1;	// is always added as leaf, h = 1
    			where -> left = temp;
    			size++;
    		}
    		else {
    			add(nitem, where->left);
    		}
    	}
    	if (nitem > where -> item){
    		if (where -> right == NULL){
    			node* temp = new node;
    			temp -> item = nitem;
    			temp -> left = NULL;
    			temp -> right = NULL;
    			temp -> height = 1;	//	is always added as leaf, h = 1
    			size++;
    			where -> right = temp;
    		}
    		else {
    			add(nitem, where->right);
    		}
    	}
    	if (nitem == where -> item){
    		return;
    	}
    	fixHeight(where);
    }


    void remove(const obj& item){
    	if(size != 0){
    		remove(item, root);
    	}
    }

    
    void remove(const obj& item, node* where) {


        
    }
    
    bool find(const obj& item) {
    	node* src = root;
    	while(src != NULL){
    		if (item == src -> item){
    			return true;
    		}
    		if (item > src -> item){
    			src = src -> right;
    		}
    		if (item < src -> item){
    			src = src -> left;
    		}
    	}
    	return false;
    }

    void chkBal(node* & where){
    	if(heightAt(where->left)-heightAt(where->right) > 1){
    		bRight(where);
    	}
    	else if (heightAt(where->right)-heightAt(where->left) > 1){
    		bLeft(where);
    	}
    }

    void bRight(node* & where){
    	if(heightAt(where->left->right) > heightAt(where->left->left)){
    		rotLeft(where->left);
    	}
    	rotRight(where);
    }

    void bLeft(node* & where){
    	if(heightAt(where->right->left) > heightAt(where->right->right)){
    		rotRight(where->left);
    	}
    	rotLeft(where);
    }
    
    void rotRight(node* & where){

    }

    void rotLeft(node* & where){

    }

    int heightAt(node* & where){
    	if(where == NULL){
    		return 0;
    	}
    	else{
    		return where->height;
    	}
    }


};






#endif /* defined(__project_6__avlTree__) */
